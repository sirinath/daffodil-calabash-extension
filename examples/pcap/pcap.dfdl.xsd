<?xml version="1.0" encoding="UTF-8"?> 
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/" xmlns:ex="http://example.com"
  targetNamespace="http://example.com" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:gpf="http://www.ibm.com/dfdl/GeneralPurposeFormat">
      
  <xs:import namespace="http://www.ibm.com/dfdl/GeneralPurposeFormat"
    schemaLocation="IBMdefined/GeneralPurposeFormat.xsd" />
  
  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">
      <dfdl:defineVariable name="byte_order" type="xs:string"/>
          
      <dfdl:format ref="gpf:GeneralPurposeFormat" 
         alignment="8" alignmentUnits="bits" lengthUnits="bits" 
         representation="binary" binaryNumberRep="binary" byteOrder="{ $ex:byte_order }" lengthKind="implicit"
         separator="" initiator="" terminator=""  
         occursCountKind="implicit" encoding="UTF-8" />
         
    </xs:appinfo>
  </xs:annotation>
  
  <xs:simpleType name="uint16" dfdl:lengthKind="explicit" dfdl:length="16">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <xs:simpleType name="uint32" dfdl:lengthKind="explicit" dfdl:length="32">
    <xs:restriction base="xs:unsignedInt"/>
  </xs:simpleType>

  <!-- for portability reasons, made this signed int use length units expressed in bytes -->
  <xs:simpleType name="int32" dfdl:lengthKind="explicit" dfdl:length="4" dfdl:lengthUnits="bytes">
    <xs:restriction base="xs:int"/>
  </xs:simpleType>

 <xs:element name="pcap">
  <xs:complexType>
    <xs:sequence dfdl:sequenceKind="ordered"> 

<!--
  typedef struct pcap_hdr_s {
        guint32 magic_number;   /* magic number */ (32 bit unsigned integer)
        guint16 version_major;  /* major version number */
        guint16 version_minor;  /* minor version number */
        gint32  thiszone;       /* GMT to local correction */
        guint32 sigfigs;        /* accuracy of timestamps */
        guint32 snaplen;        /* max length of captured packets, in octets */
        guint32 network;        /* data link type */
  } pcap_hdr_t;

    magic_number: used to detect the file format itself and the byte ordering. The writing application writes 0xa1b2c3d4 with it's native byte ordering format into this field. The reading application will read either 0xa1b2c3d4 (identical) or 0xd4c3b2a1 (swapped). If the reading application reads the swapped 0xd4c3b2a1 value, it knows that all the following fields will have to be swapped too.
    version_major, version_minor: the version number of this file format (current version is 2.4)
    thiszone: the correction time in seconds between GMT (UTC) and the local timezone of the following packet header timestamps. Examples: If the timestamps are in GMT (UTC), thiszone is simply 0. If the timestamps are in Central European time (Amsterdam, Berlin, ...) which is GMT + 1:00, thiszone must be -3600. In practice, time stamps are always in GMT, so thiszone is always 0.
    sigfigs: in theory, the accuracy of time stamps in the capture; in practice, all tools set it to 0
    snaplen: the "snapshot length" for the capture (typically 65535 or even more, but might be limited by the user), see: incl_len vs. orig_len below
    network: link-layer header type, specifying the type of headers at the beginning of the packet (e.g. 1 for Ethernet, see tcpdump.org's link-layer header types page for details); this can be various types such as 802.11, 802.11 with various radio information, PPP, Token Ring, FDDI, etc.

-->
  <xs:element name="global_header" minOccurs="1" maxOccurs="1">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="magic_number" type="ex:uint32"
          dfdl:byteOrder="bigEndian">
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <!-- FIXME: insert some way to write hexadecimal number as a constant -->
              <dfdl:setVariable ref="ex:byte_order"><![CDATA[{
            if (xs:unsignedInt(.) eq 2712847316) then 'bigEndian'
            else if (xs:unsignedInt(.) eq 3569595041) then 'littleEndian'
            else 'Error: Magic number was not 0xA1B2C3D4 (for bigEndian) or 0xD4C3B2A1 (for littleEndian).'
            }]]></dfdl:setVariable>
            </xs:appinfo>
          </xs:annotation>
        </xs:element>
        <xs:element name="version_major" type="ex:uint16" />
        <xs:element name="version_minor" type="ex:uint16" />
        <xs:element name="thiszone" type="ex:int32" />
        <xs:element name="sigfigs" type="ex:uint32" />
        <xs:element name="snaplen" type="ex:uint32" />
        <xs:element name="network" type="ex:uint32" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>

<!--
  typedef struct pcaprec_hdr_s {
        guint32 ts_sec;         /* timestamp seconds */
        guint32 ts_usec;        /* timestamp microseconds */
        guint32 incl_len;       /* number of octets of packet saved in file */
        guint32 orig_len;       /* actual length of packet */
  } pcaprec_hdr_t;

    ts_sec: the date and time when this packet was captured. This value is in seconds since January 1, 1970 00:00:00 GMT; this is also known as a UN*X time_t. You can use the ANSI C time() function from time.h to get this value, but you might use a more optimized way to get this timestamp value. If this timestamp isn't based on GMT (UTC), use thiszone from the global header for adjustments.
    ts_usec: the microseconds when this packet was captured, as an offset to ts_sec.  Beware: this value shouldn't reach 1 second (1 000 000), in this case ts_sec must be increased instead!
    incl_len: the number of bytes of packet data actually captured and saved in the file. This value should never become larger than orig_len or the snaplen value of the global header.
    orig_len: the length of the packet as it appeared on the network when it was captured. If incl_len and orig_len differ, the actually saved packet size was limited by snaplen.

-->
      <xs:element name="packet" minOccurs="1" maxOccurs="unbounded">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="header">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="ts_sec" type="ex:uint32"/> <!-- ts_sec should be replaced by a dateTime field to seconds granularity. -->
                  <xs:element name="ts_usec" type="ex:uint32"/>
                  <xs:element name="incl_len" type="ex:uint32"/>
                  <xs:element name="orig_len" type="ex:uint32"/>
                </xs:sequence>
              </xs:complexType>
            </xs:element>
            <xs:element name="data" type="xs:hexBinary" dfdl:lengthUnits="bytes" dfdl:lengthKind="explicit"
               dfdl:length="{ ../ex:header/ex:incl_len }"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
  
    </xs:sequence> 
  </xs:complexType>
 </xs:element>
 
</xs:schema>
